stages:
  - init
  - build
  - deploy
  - release

services:
  - name: docker:20.10.20-dind
    alias: docker

variables:
  # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  DOCKER_TLS_CERTDIR: "/certs"

get-version:
  tags:
    - kube
  stage: init
  image: ubuntu:jammy
  script:
    - apt-get update
    - apt-get install git
    - git clone https://github.com/ynput/ayon-backend ./backend
    - git clone https://github.com/ynput/ayon-frontend ./frontend
    - VERSION=$(sed -n 's/__version__ = \"\(.*\)\"/\1/p' backend/ayon_server/version.py)
    - TODAY=$(date +%Y%m%d)
    - echo "VERSION=${VERSION}" > version_info.txt
    - echo "TODAY=${TODAY}" >> version_info.txt
    - echo version=${VERSION} > RELEASE
    - echo build_date=${TODAY} >> RELEASE
    - echo build_time=$(shell date +%H%M) >> RELEASE
    - echo frontend_branch=$(shell cd frontend && git branch --show-current) >> RELEASE
    - echo backend_branch=$(shell cd backend && git branch --show-current) >> RELEASE
    - echo frontend_commit=$(shell cd frontend && git rev-parse --short HEAD) >> RELEASE
    - echo backend_commit=$(shell cd backend && git rev-parse --short HEAD) >> RELEASE
  artifacts:
    paths:
      - frontend
      - backend
      - RELEASE
    reports:
      dotenv: version_info.txt
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
      when: never

build-server:
  stage: build
  dependencies:
    - get-version
  tags:
    - kube
  variables:
    IMAGE_NAME: "ayon-docker"
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [ "" ]
  script:
    - /kaniko/executor
      --context .
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/alkemyx/${IMAGE_NAME}:${VERSION}-${TODAY}"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
      when: never

.git-setup: &git-setup
  before_script:
    - apk add --no-cache git
    - URL_WITH_AUTH="https://gitlab-ci-token:${CI_TOKEN}@$(echo $CI_PROJECT_URL | sed 's|https://||')"
    - git clone "${URL_WITH_AUTH}.git" "${CI_COMMIT_SHA}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.name "${GITLAB_USER_LOGIN}"
    - cd "${CI_COMMIT_SHA}"
    - git checkout -B ${CI_COMMIT_BRANCH} remotes/origin/${CI_COMMIT_BRANCH} --

update-helm-chart:
  stage: deploy
  dependencies:
    - get-version
  tags:
    - kube
  extends: .git-setup
  image: alpine:latest
  script:
    - IMAGE_TAG=${VERSION}-${TODAY}
    # The last part of this syntax is to avoid replacing multiple 'tag' entries and just do it on the first one it finds
    # which in our values.yaml happens to be the 'ayon' artifact that we are interested in replacing
    - 'sed -i "/tag:.*/{s//tag: $IMAGE_TAG/;:a;n;ba;}" k8s/ayon/values.yaml'
    - 'sed -i "s/appVersion:.*/appVersion: $IMAGE_TAG/" k8s/ayon/Chart.yaml'
    - git add k8s/ayon/values.yaml
    - git add k8s/ayon/Chart.yaml
    - git commit -m "Update Helm chart with new tag [ci skip]"
    - git diff-index --quiet HEAD || git commit -am '[skip ci] values.yml update'
    - git push origin "${CI_COMMIT_BRANCH}"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
      when: never
  when: on_success

release-patch:
  stage: release
  dependencies:
    - get-version
  tags:
    - kube
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - IMAGE_TAG=${VERSION}-${TODAY}
    - >
      if release-cli get --tag-name "${IMAGE_TAG}"; then
        echo "Release "${IMAGE_TAG}" already exists, updating..."
        release-cli update --description "Release ${IMAGE_TAG} using CI pipeline $CI_PIPELINE_ID" --tag-name "${IMAGE_TAG}"
      else
        echo "Release "${IMAGE_TAG}" does not exist, creating..."
        release-cli create --description "Release ${IMAGE_TAG} using CI pipeline $CI_PIPELINE_ID" --tag-name "${IMAGE_TAG}"
      fi
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
      when: never